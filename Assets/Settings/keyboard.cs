//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/keyboard.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Keyboard : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Keyboard()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""keyboard"",
    ""maps"": [
        {
            ""name"": ""Keys"",
            ""id"": ""38824105-9eb4-4a2d-946d-36282c2e0e2f"",
            ""actions"": [
                {
                    ""name"": ""key"",
                    ""type"": ""Button"",
                    ""id"": ""162a2a8f-b001-47d6-9502-b2f5b514b269"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""clicks"",
                    ""type"": ""Button"",
                    ""id"": ""4a4c5f52-ea37-414b-8759-adef1f6b29db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b400ebfb-7c7a-4371-8fbf-f951c9dad85f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b8a2a12-026f-41ca-ad70-2feb1e164f29"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""clicks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_key = m_Keys.FindAction("key", throwIfNotFound: true);
        m_Keys_clicks = m_Keys.FindAction("clicks", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keys
    private readonly InputActionMap m_Keys;
    private IKeysActions m_KeysActionsCallbackInterface;
    private readonly InputAction m_Keys_key;
    private readonly InputAction m_Keys_clicks;
    public struct KeysActions
    {
        private @Keyboard m_Wrapper;
        public KeysActions(@Keyboard wrapper) { m_Wrapper = wrapper; }
        public InputAction @key => m_Wrapper.m_Keys_key;
        public InputAction @clicks => m_Wrapper.m_Keys_clicks;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void SetCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterface != null)
            {
                @key.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnKey;
                @key.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnKey;
                @key.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnKey;
                @clicks.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnClicks;
                @clicks.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnClicks;
                @clicks.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnClicks;
            }
            m_Wrapper.m_KeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @key.started += instance.OnKey;
                @key.performed += instance.OnKey;
                @key.canceled += instance.OnKey;
                @clicks.started += instance.OnClicks;
                @clicks.performed += instance.OnClicks;
                @clicks.canceled += instance.OnClicks;
            }
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IKeysActions
    {
        void OnKey(InputAction.CallbackContext context);
        void OnClicks(InputAction.CallbackContext context);
    }
}
